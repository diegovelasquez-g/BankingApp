@page "/new-purchase"
@using BankingApp.Client.Contracts
@using BankingApp.Client.ViewModels
@using BankingApp.Shared.Dtos.Requests
@using Microsoft.AspNetCore.Authorization

@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICreditCardsService _creditCardsService
@inject IPurchasesService _purchasesService

@attribute [Authorize]

<h3>Nueva Compra</h3>

<EditForm Model="newPurchase" OnValidSubmit="OnValidSubmit">
    <div class="mb-3">
        <label class="form-label">Descripción</label>
        <InputTextArea class="form-control" @bind-Value="newPurchase.Description"></InputTextArea>
    </div>
    <div class="mb-3">
        <label class="form-label">Tarjeta de Crédito</label>
        <InputSelect class="form-select" @bind-Value="newPurchase.CreditCardId">
            <option value="">Seleccione una tarjeta</option>
            @foreach(var creditCard in creditCards)
            {
                <option value="@creditCard.CreditCardId">@creditCard.CardNumber</option>
            })
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Monto</label>
        <InputNumber class="form-control" @bind-Value="newPurchase.Amount"></InputNumber>
    </div>
    <div class="mb-3">
        <label class="form-label">Fecha de compra</label>
        <InputDate class="form-control" @bind-Value="newPurchase.Date"></InputDate>
    </div>

    <button class="btn btn-success" type="submit">
        Guardar
    </button>
    <a class="btn btn-warning" href="empleados">Volver</a>
</EditForm>

@code {
    NewPurchaseRequest newPurchase = new();
    List<UserCreditCardsViewModel> creditCards = new();
    private Guid UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("UserId");

        if (userIdClaim is not null)
            UserId = Guid.Parse(userIdClaim.Value);

        var response = await _creditCardsService.GetCreditCardsAsync(UserId);
        foreach(var creditCard in response)
        {
            creditCards.Add(new UserCreditCardsViewModel
            {
                CreditCardId = creditCard.CreditCardId,
                CardNumber = creditCard.CardNumber
            });
        };
    }

    private async Task OnValidSubmit()
    {
        var response = await _purchasesService.NewPurchaseAsync(newPurchase);
        if (response)
        {
            await Swal.FireAsync("Compra guardada", "La compra ha sido guardada exitosamente", SweetAlertIcon.Success);
            NavigationManager.NavigateTo("/purchases");
        }
        else
        {
            await Swal.FireAsync("Error", "Ha ocurrido un error al guardar la compra", SweetAlertIcon.Error);
        }
    }
}
